# test!
name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]
  # pull_request: 
  #   branches: [ "master" ]
  #   types:
  #     - closed


env:
  ENV_PATH: .env
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: cicd_project
  BUCKET_NAME: riccio-bucket
  CODE_DEPLOY_APP_NAME: codedeploy
  DEPLOYMENT_GROUP_NAME: test
  S3_BUCKET_DIR_NAME: test

jobs:
  build:
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.10.0]
    steps:
    - name: ✅ Checkout branch
      uses: actions/checkout@v3

    - name: 📀 Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: ✨ Install pnpm
      uses: pnpm/action-setup@v2
      id: pnpm-install
      with:
        version: 8.14.1
        run_install: false

    - name: 🚛 Get pnpm cache store directory
      id: pnpm-cache
      shell: bash
      run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: ⚡️ Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
             ${{ runner.os }}-pnpm-store-

    - name: 📦 Install dependencies
      run: | 
        pnpm install
        pnpm build

    # - name: 🔨 Build Project
      # run: pnpm build
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest
    environment: test

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: 🗂️ Make config folder
      run: mkdir -p config

    - name: ⚙️ Create .env file
      run: |
          touch ${{ env.ENV_PATH }}
    
    - name: 📦 Zip project files
      run: zip -r ./$GITHUB_SHA.zip .


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🚛 Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ env.BUCKET_NAME }}/${{ env.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip
         
    - name: 🚀 Deploy to EC2 with CodeDeploy
      run: aws deploy create-deployment
           --application-name codedeploy
           --deployment-config-name CodeDeployDefault.AllAtOnce
           --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }}
           --s3-location bucket=${{ env.BUCKET_NAME }},bundleType=zip,key=${{ env.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
